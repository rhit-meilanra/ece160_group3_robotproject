#include <Adafruit_MCP23X17.h>
Adafruit_MCP23X17 gpioExt;
#include <PS4Controller.h>

// Below are the states for the robot, written by Refail Meilandry on 10/6/2025 12:25pm
#define STOP 0
#define FORWARD 1
#define REVERSE 2
#define TURNRF 3    //turn right forward
#define TURNLF 4    //turn left forward
#define TURNRR 5    //turn right reverse
#define TURNLR 6    //turn left reverse
#define PIVOTRF 7   //pivot right forward
#define PIVOTLF 8   //pivot left forward
#define PIVOTRR 9   //pivot right reverse
#define PIVOTLR 10  //pivot left reverse
#define SPINCL 11   //spins clock-wise
#define SPINCCL 12  // Spins councter-clockwise

#define GPB0 8
#define GPB1 9
#define nSLPLPin GPB0
#define nSLPRPin GPB1
#define rightMotorDIRPin 15
#define rightMotorPWMPin 13
#define leftMotorDIRPin 14
#define leftMotorPWMPin 12
#define motorFreq 500
#define motorPwmBits 8
#define FWD LOW
#define REV HIGH
const int motorPwmMaxCount = pow(2, motorPwmBits);
int pwmGoLowCount;
int pwmDutyCycle = 0;
int baudrate = 115200;
float readControllerData();

void setup() {
  Serial.begin(baudrate);
  gpioExt.begin_I2C(0x20);
  gpioExt.pinMode(nSLPLPin, OUTPUT);
  gpioExt.pinMode(nSLPRPin, OUTPUT);
  gpioExt.digitalWrite(nSLPLPin, LOW);
  gpioExt.digitalWrite(nSLPRPin, LOW);
  pinMode(rightMotorDIRPin, OUTPUT);
  pinMode(leftMotorDIRPin, OUTPUT);
  pinMode(rightMotorPWMPin, OUTPUT);
  pinMode(leftMotorPWMPin, OUTPUT);
  ledcAttach(rightMotorPWMPin, motorFreq, motorPwmBits);
  ledcAttach(leftMotorPWMPin, motorFreq, motorPwmBits);
  PS4.begin();
  Serial.println("Robot Starting......");
  Serial.println("Enter the motor duty cycle as a percentage from 0-100");
}

void loop() {
  // joyStick_LCase = readControllerData.ino();
  // joyStick_RCase = 
  // if (Serial.available() >= 1) {
  //   pwmDutyCycle = Serial.parseInt();
  //   Serial.print("The duty cycle is: ");
  //   Serial.println(pwmDutyCycle);
  // }
  // if ((pwmDutyCycle >= 0) && (pwmDutyCycle <= 100)) {
  //   gpioExt.digitalWrite(nSLPLPin, HIGH);
  //   gpioExt.digitalWrite(nSLPRPin, HIGH);
  //   digitalWrite(rightMotorDIRPin, REV);
  //   digitalWrite(leftMotorDIRPin, REV);
  //   pwmGoLowCount = 0.01 * pwmDutyCycle * motorPwmMaxCount;
  //   ledcWrite(rightMotorPWMPin, pwmGoLowCount);
  //   ledcWrite(leftMotorPWMPin, pwmGoLowCount);
  // } else {
  //   Serial.println("You entered an invalid Duty Cycle: setting it to ");
  //   pwmDutyCycle = 0;
  //   gpioExt.digitalWrite(nSLPLPin, LOW);
  //   gpioExt.digitalWrite(nSLPRPin, LOW);
  // }

  //below is Braeden's switch case statements

  if (PS4.Down() == 0 && PS4.Up() == 0 && PS4.Cross() == 0 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = STOP;
  }
  if (PS4.Down() == 0 && PS4.Up() == 1 && PS4.Cross() == 0 && PS4.Triangle == 1 && PS4.Left() == 0 && PS4.Circle() == 0) {
    STATE = FORWARD;
  }
  if (PS4.Down() == 1 && PS4.Up() == 0 && PS4.Cross() == 1 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = REVERSE;
  }
  if (PS4.Down() == 0 && PS4.Up() == 1 && PS4.Cross() == 0 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 1) {}
    STATE = TURNRF;
  }
  if (PS4.Down() == 0 && PS4.Up() == 0 && PS4.Cross() == 0 && PS4.Triangle == 1 && PS4.Left() == 1 && PS4.Circle() == 0) {}
    STATE = TURNLF;
  }
  if (PS4.Down() == 1 && PS4.Up() == 0 && PS4.Cross() == 0 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 1) {}
    STATE = TURNRR;
  }
  if (PS4.Down() == 0 && PS4.Up() == 0 && PS4.Cross() == 1 && PS4.Triangle == 0 && PS4.Left() == 1 && PS4.Circle() == 0) {}
    STATE = TURNLR;
  }
  if (PS4.Down() == 0 && PS4.Up() == 1 && PS4.Cross() == 0 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = PIVOTRF;
  }
  if (PS4.Down() == 0 && PS4.Up() == 0 && PS4.Cross() == 0 && PS4.Triangle == 1 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = PIVOTLF;
  }
  if (PS4.Down() == 1 && PS4.Up() == 0 && PS4.Cross() == 0 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = PIVOTRR;
  }
  if (PS4.Down() == 0 && PS4.Up() == 0 && PS4.Cross() == 1 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = PIVOTLR;
  }
  if (PS4.Down() == 0 && PS4.Up() == 1 && PS4.Cross() == 1 && PS4.Triangle == 0 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = SPINCL;
  }
  if (PS4.Down() == 1 && PS4.Up() == 0 && PS4.Cross() == 0 && PS4.Triangle == 1 && PS4.Left() == 0 && PS4.Circle() == 0) {}
    STATE = SPINCCL;
  }
}
}
