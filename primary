#include <Adafruit_MCP23X17.h>
Adafruit_MCP23X17 gpioExt;
#include <PS4Controller.h>

// Below are the states for the robot, written by Refail Meilandry on 10/6/2025 12:25pm
#define BUTTON_MODE 100
#define JOYSTICK_MODE -1
#define STOP 0
#define FORWARD 1
#define REVERSE 2
#define TURNRF 3    //turn right forward
#define TURNLF 4    //turn left forward
#define TURNRR 5    //turn right reverse
#define TURNLR 6    //turn left reverse
#define PIVOTRF 7   //pivot right forward
#define PIVOTLF 8   //pivot left forward
#define PIVOTRR 9   //pivot right reverse
#define PIVOTLR 10  //pivot left reverse
#define SPINCL 11   //spins clock-wise
#define SPINCCL 12  // Spins councter-clockwise
int STATE = STOP;
int MODE = BUTTON_MODE;

#define GPB0 8
#define GPB1 9
#define nSLPLPin GPB0
#define nSLPRPin GPB1
#define rightMotorDIRPin 15
#define rightMotorPWMPin 13
#define leftMotorDIRPin 14
#define leftMotorPWMPin 12
#define motorFreq 500
#define motorPwmBits 8
#define FWD LOW
#define REV HIGH
const int motorPwmMaxCount = pow(2, motorPwmBits);
int pwmGoLowCount;
int pwmDutyCycle = 20;
int baudrate = 115200;
float read_RYValue();
float read_RXValue();
float read_LYValue();
float read_LXValue();
float joystick_LYValue;
float joystick_LXValue;

void setup() {
  Serial.begin(baudrate);
  gpioExt.begin_I2C(0x20);
  gpioExt.pinMode(nSLPLPin, OUTPUT);
  gpioExt.pinMode(nSLPRPin, OUTPUT);
  gpioExt.digitalWrite(nSLPLPin, LOW);
  gpioExt.digitalWrite(nSLPRPin, LOW);
  pinMode(rightMotorDIRPin, OUTPUT);
  pinMode(leftMotorDIRPin, OUTPUT);
  pinMode(rightMotorPWMPin, OUTPUT);
  pinMode(leftMotorPWMPin, OUTPUT);
  ledcAttach(rightMotorPWMPin, motorFreq, motorPwmBits);
  ledcAttach(leftMotorPWMPin, motorFreq, motorPwmBits);
  PS4.begin();
}

void loop() {

  // if (Serial.available() >= 1) {
  //   pwmDutyCycle = Serial.parseInt();
  //   Serial.print("The duty cycle is: ");
  //   Serial.println(pwmDutyCycle);
  // }
  // if ((pwmDutyCycle >= 0) && (pwmDutyCycle <= 100)) {
  //   gpioExt.digitalWrite(nSLPLPin, HIGH);
  //   gpioExt.digitalWrite(nSLPRPin, HIGH);
  //   digitalWrite(rightMotorDIRPin, REV);
  //   digitalWrite(leftMotorDIRPin, REV);
  //   pwmGoLowCount = 0.01 * pwmDutyCycle * motorPwmMaxCount;
  //   ledcWrite(rightMotorPWMPin, pwmGoLowCount);
  //   ledcWrite(leftMotorPWMPin, pwmGoLowCount);
  // } else {
  //   Serial.println("You entered an invalid Duty Cycle: setting it to ");
  //   pwmDutyCycle = 0;
  //   gpioExt.digitalWrite(nSLPLPin, LOW);
  //   gpioExt.digitalWrite(nSLPRPin, LOW);
  // }

  switch (MODE) {
    case BUTTON_MODE:
      pwmDutyCycle = 100;
      switch (STATE) {
        case STOP:
          run_STOP();
          find_btnState();
          break;
        case FORWARD:
          run_FORWARD();
          find_btnState();
          break;
        case REVERSE:
          run_REVERSE();
          find_btnState();
          break;
        case TURNRF:
          run_TURNRF();
          find_btnState();
          break;
        case TURNLF:
          run_TURNLF();
          find_btnState();
          break;
        case TURNRR:
          run_TURNRR();
          find_btnState();
          break;
        case TURNLR:
          run_TURNLR();
          find_btnState();
          break;
        case PIVOTRF:
          run_PIVOTRF();
          find_btnState();
          break;
        case PIVOTLF:
          run_PIVOTLF();
          find_btnState();
          break;
        case PIVOTRR:
          run_PIVOTRR();
          find_btnState();
          break;
        case PIVOTLR:
          run_PIVOTLR();
          find_btnState();
          break;
        case SPINCL:
          run_SPINCL();
          find_btnState();
          break;
        case SPINCCL:
          run_SPINCCL();
          find_btnState();
          break;
        default:
          break;
      }
      if (PS4.Touchpad()) MODE = JOYSTICK_MODE;
      break;
    case JOYSTICK_MODE:
      joystick_LYValue = read_LYValue();
      joystick_LXValue = read_LXValue();
      pwmDutyCycle = constrain(abs(joystick_LYValue), 0, 100);
      switch (STATE) {
        case STOP:
          run_joySTOP();
          find_joyState(joystick_LYValue);
          break;
        case FORWARD:
          run_joyFORWARD();
          find_joyState(joystick_LYValue);
          break;
        case REVERSE:
          run_REVERSE();
          find_joyState(joystick_LYValue);
          break;
        case TURNRF:
          run_TURNRF();
          find_joyState(joystick_LYValue);
          break;
        case TURNLF:
          run_TURNLF();
          find_joyState(joystick_LYValue);
          break;
        case TURNRR:
          run_TURNRR();
          find_joyState(joystick_LYValue);
          break;
        case TURNLR:
          run_TURNLR();
          find_joyState(joystick_LYValue);
          break;
        case PIVOTRF:
          run_PIVOTRF();
          find_joyState(joystick_LYValue);
          break;
        case PIVOTLF:
          run_PIVOTLF();
          find_joyState(joystick_LYValue);
          break;
        case PIVOTRR:
          run_PIVOTRR();
          find_joyState(joystick_LYValue);
          break;
        case PIVOTLR:
          run_PIVOTLR();
          find_joyState(joystick_LYValue);
          break;
        case SPINCL:
          run_SPINCL();
          find_joyState(joystick_LYValue);
          break;
        case SPINCCL:
          run_SPINCCL();
          find_joyState(joystick_LYValue);
          break;
        default:
          break;
      }
      if (PS4.Touchpad()) MODE = BUTTON_MODE;
      break;
    default:
      break;
  }
}
